1.- Describe three main techniques that the author used to structure the program.

- Modular Programming. The author is separation the program into different modules/files. Each one focus on certain
                        functionality: the game logic, the game initialization, the data module, etc.

- Classes. The use of different classes with their respective instance variables.

- Single Responsability Principle: For example, the class Data, a simple class defining the structures that will hold
            the different types of key elements: rooms, vocabulary, messages, hints

            class Data(object):
                def __init__(self):
                    self.rooms = {}
                    self.vocabulary = {}
                    self.objects = {}
                    self.messages = {}
                    self.class_messages = []
                    self.hints = {}
                    self.magic_messages = {}

                def referent(self, word):
                    if word.kind == 'noun':
                        return self.objects[word.n % 1000]


2.- I think that the author is using meaningful names mostly.
class Game(Data):

    look_complaints = 3  # how many times to "SORRY, BUT I AM NOT ALLOWED..."
    full_description_period = 5  # how often we use a room's full description
    full_wests = 0  # how many times they have typed "west" instead of "w"
    dwarf_stage = 0  # DFLAG how active the dwarves are
    dwarves_killed = 0  # DKILL
    knife_location = None  # KNFLOC
    foobar = -1  # FOOBAR turn number of most recent still-valid "fee"
    gave_up = False
    treasures_not_found = 0  # TALLY how many treasures have not yet been seen
    impossible_treasures = 0  # TALLY2 how many treasures can never be retrieved
    lamp_turns = 330
    warned_about_dim_lamp = False
    bonus = 0  # how they exited the final bonus round
    is_dead = False  # whether we are currently dead
    deaths = 0  # how many times the player has died
    max_deaths = 3  # how many times the player can die
    turns = 0

We can easiy assume that is_dead stores a boolean that shows if the player is dead or not.
max_deaths, the top times a player can die.
deaths, the number of times the player has died.

For not so meaningful examples, I will go to the function start() inside game.py.

for key, value in list(self.vocabulary.items()):
    if isinstance(key, str) and len(key) > 5:
    self.vocabulary[key[:5]] = value

He is using key and value, which are pretty generic for the dictionary.
He could have used exactly what they are holding.

Another example of not so meaningful names, we can look at this part of the function

def move_to(self, newloc=None):  #2
    loc = self.loc
    if newloc is None:
        newloc = loc

Insted of loc and newloc, he could have used location and newLocation. If I search for loc, the results are in the
hundreds.


3.- Do the functions used in the code do one thing? Give some examples of functions that only do one thing.
Give some examples of functions that do more than one thing.

There are pretty straight forward function that do one thing only.
For example:

#Returns a random number
def random(self):
    return self.random_generator.random()

#Concatenates text to the output
def write(self, more):
   """Append the Unicode representation of `s` to our output."""
   if more:
       self.output += str(more).upper()
       self.output += '\n'

#This function using the previous write() function
def write_message(self, n):
   self.write(self.messages[n])


We have more complex functions that start doing more than one thing.

def move_to(self, newloc=None):  #2
    loc = self.loc
    if newloc is None:
        newloc = loc

    if self.is_closing and newloc.is_aboveground:
        self.write_message(130)
        newloc = loc  # cancel move and put him back underground
        if not self.panic:
            self.clock2 = 15
            self.panic = True

    must_allow_move = ((newloc is loc) or (loc.is_forced)
                       or (loc.is_forbidden_to_pirate))

    dwarf_blocking_the_way = any(
        dwarf.old_room is newloc and dwarf.has_seen_adventurer
        for dwarf in self.dwarves
        )

    if not must_allow_move and dwarf_blocking_the_way:
        newloc = loc  # cancel move they were going to make
        self.write_message(2)  # dwarf is blocking the way

    self.loc = loc = newloc  #74

    # IF LOC.EQ.0 ?
    is_dwarf_area = not (loc.is_forced or loc.is_forbidden_to_pirate)
    if is_dwarf_area and self.dwarf_stage > 0:
        self.move_dwarves()
    else:
        if is_dwarf_area and loc.is_after_hall_of_mists:
            self.dwarf_stage = 1
        self.describe_location()

We have the function movet_to(), which sets locations, appends messages to the output,
make logic evaluations (must_allow_move), among other tasks.


4.- Do any of the functions cause side effects? If so, which ones?

According to the Python Documentation:

"Functional style discourages functions with side effects that modify
internal state or make other changes that aren’t visible in the function’s return value.

For example, in Python a print statement or a time.sleep(1) both return no useful value;
they’re only called for their side effects of sending some text to the screen or pausing execution for a second."

So:

There is a sleep() in

def baudout(s):
    for c in s:
        sleep(9. / BAUD)  # 8 bits + 1 stop bit @ the given baud rate
        stdout.write(c)
        stdout.flush()

There is a print in:

def resume(savefile, quiet=False):
    global _game

    from game import Game
    from prompt import install_words

    _game = Game.resume(savefile)
    install_words(_game)
    if not quiet:
        print('GAME RESTORED\n')


5.- Can you find any repeated code that could be made into a function?

In the play.py file, there are two functions using these lines:

    from game import Game
    from prompt import install_words

There can be a function that encapsulate these imports.


6.- Does the program use exception handling? Can you find any input that causes the program to terminate abnormally?
Hint: run the program from the terminal prompt. The invalid input may not be normal text.

Not precisely. It only uses a try-catch in here:

if __name__ == "__main__":
    try:
        loop()
    except EOFError:
        pass

And the exception is not well handled. (Does nothing with the exception, just let it pass)

In the adventure.py file, in the loop() functions there is this code:

while not game.is_finished:
    line = raw_input('> ')
    words = re.findall(r'\w+', line)
    if words:
        baudout(game.do_command(words))

We can see that it is using raw_input(), and there is no try-catch.
The raw_input() function reads a line from input, converts it to a string (stripping a trailing newline),
and returns that. When EOF is read, EOFError is raised.

So, if we can create an EOFError, the program should crash, because of the missing exception handling.

And of course, you can always terminate the program using Ctrl + C.



7.- Do any of the classes have responsibility over more than one piece of functionality. If so, which ones?

The Game class,
This class is in charge of the main functionality of the game. It has functions for the movements, for handling the
commands.

However it also contains some general functions like a random generator, some write and write_message methods, that
from my point of view could be taken out of the class and be placed in a general functions library. So they can be
reused easily in other files of the program, or even in other python programs.


8.- Are the classes cohesive? List any that aren’t.

I would classify the Class Room in model.py as non cohesive.
It is declaring many instance variables (13), however there are no methods that manipulate this variables.

This is the same for the Class Hint, declaring 6 instance variables, but only declares one method: (the init). There
 are no more methods to manipulate the given instance variables.


9.- Describe the author’s approach to commenting the code. Provide examples of good and bad comments that have been
used in the code.

He likes to keep comments to the minimun in simple and short files. But for the bigger and complex files, like game.py,
he comments more the code.

For the instance variables of the class Game, he decided to explain each of them. (Which could be redundant since many
of the instance variables are self explanatory). However, in these variables:

    dwarves_killed = 0  # DKILL
    knife_location = None  # KNFLOC

the comments result in some kind of key word that could be confusing for the reader. (This is a bad comment)

I can perceive that the author likes to give a general description of what the following code does. And just adds
additional comments for a punctual function or part of the code that could be complex to understand. (Which could be seen
as a good comment)

# Without stabilizing the order with a sort, the room chosen
# would depend on how the Room addresses in memory happen to
# order the rooms in the set() - and make it impossible to
# test the game by setting the random number generator seed
# and then playing through the game.
locations = sorted(locations, key=attrgetter('n'))
if locations:
    new_room = self.choice(locations)
else:
    new_room = dwarf.old_room
dwarf.old_room, dwarf.room = dwarf.room, new_room
if self.loc in (dwarf.room, dwarf.old_room):
    dwarf.has_seen_adventurer = True
elif self.loc.is_before_hall_of_mists:
    dwarf.has_seen_adventurer = False

Also, the author gives a little description at the beginning of each module, so the reader can get a general idea of
what that module is about.


10.- Provide an example of where vertical formatting has been used to make the code clearer.

class Room(object):
    """A location in the game."""

    long_description = ''
    short_description = ''
    times_described = 0
    visited = False

    is_light = False
    is_forbidden_to_pirate = False
    liquid = None
    trying_to_get_into_cave = False
    trying_to_catch_bird = False
    trying_to_deal_with_snake = False
    lost_in_maze = False
    pondering_dark_room = False
    at_witts_end = False

    def __init__(self):
        self.travel_table = []

    def __repr__(self):
        return '<room {} at {}>'.format(self.n, hex(id(self)))

    @property
    def is_forced(self):
        return self.travel_table and self.travel_table[0].is_forced

    @property
    def is_aboveground(self):
        return 1 <= self.n <= 8


In this example it is easy to identify the elements of the class Room.
All the instance variables are kept together at the beginning of the class.
There is a blank line that marks the beginning of the functions, which every one is separated by a blank line too.
Inside the functions, all its content is kept as close as possible (No leaving spaces between the name of the function
and their contents).


11.- Run the tests provided with the program.

Do they pass or fail? Do you consider the tests meet the F.I.R.S.T. criteria?
Provide details of why they do or do not meet the criteria.

test_commands = Pass  (2 of 2 in 10.033s)
test_data = Pass (10 of 10 in .312s)

FIRST
Fast: Yes. This is a subjective term, but a test run in 10 seconds, clearly allow us to run it frequently.

Independent: It does not matter in which order the tests are run, they produce the same outputs.

Repeatable: Yes, they are repeatable. It does not matter in which environment they are running (Linux, Windows, Mac OS)

Self-Validation: Yes. They always shows the same results.

Timely:  We can see from the readme.txt file that the first release was made on Jan 31st and the 100% test coverage 15
days after. I would like to assume that the test was written simultaneously along the code. Probably, in the first
release the author got a high percentage of the test coverage, with some minor bugs. Then in Feb 15th, the author got
the 100% of the test coverage. So, in conclusion, the tests meet this point.

Finally, I can say that the tests do meet the FIRST criteria.



