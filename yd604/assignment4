Assignment 4

Questions

1. Modules. For example, in adventure.py it imports load_advent_dat from the module play.py, and Game from the module game.py, which separates the program and makes the program more readable and easier to understand.

Classes. For example, in game.py it builds a class Game, which defines several variables and functions and makes the the program more organized.

Single responsibility principle. For example, in model.py it builds a class Hint which maintain a small number of attributes and fullfils one resposibility to returns A hint if the player loiters in one area too long.


2. Meaningful names. For example, in game.py, the author defined a function called is_finished(self) in the Game class. This function evaluates whether the game is finished or not based on the value of is_dead, is_done and yesno_callback. if is_finished(self) returns true then the game will end. 
Also, the function is_dark(self) evaluates whether the location is dark or not based on the values returned by is_here(lamp) and lamp.prop.

Not meaningful names. For example, in game.py, the authore defined two functions i_eat() and t_eat(), which are not meaningful because we cannot understand the difference between those two functions based on their names.


3. Functions that only do one thing. For example, in game.py, the author defined a function called is_finished(self) which evaluates whether the game is finished or not based on the value of is_dead, is_done and yesno_callback. if is_finished(self) returns true then the game will end. So it only does one thing. Also, the function is_dark(self) evaluates whether the location is dark or not based on the values returned by is_here(lamp) and lamp.prop.

Functions that do more than one thing. For example, in game.py the function start2(self, yes) calls the function write_message, set the value of hints[3].used and lamp_turns if the parameter is yes. Also, it set the value of oldloc2, dwarves, pirate and treasures, treasures_not_found. And it calls the function describe_location().


4. Yes. The functions move_dwarves(self) in game.py will cause side effects since it  defines dwarf_count = knife_wound = 0. And if the value of dwarf_count is changes to be 1 and the knife_wound will be changed to be 1 and then it calls the function self.die() which is not what the function used to do.


5. The function random(self) and choice(self, seq) in game.py could be made into one function called random(self, seq) and if seq if None then it returns self.random_genrator.random() and if seq is not None then it returns self.random_generator.choice(seq).


6. Yes. In adventure.py, if the exception EOFError occurs then the program will be passed and the exception is handled. Any invalid input will be handled as printing “I DON'T KNOW THAT WORD.” or “WHAT?” unless you entered ctrl+c will terminate the program.


7. The class Game(data) in game.py has resposibility over many pieces of functionality, which could be separated into several classes.


8. Not all classes are cohesive. For example, the class Game(data) is not since it maintains a large number of attributes.


9.The author comments the code by putting a paragraph of words to explain the use of each module at the top of the codes. And at the end of defining some variables or functions, the author will put one line to give some description.

Good comments. For example, 
self.clock1 = 30                # counts down from finding last treasure
self.clock2 = 50                # counts down until cave closes
Those two comments make it clear of the meaning for those two variable clock1 and clock2 and states the difference.

Bad comments. For example, in game.py there are the following comments.

dwarf_stage = 0  # DFLAG how active the dwarves are
dwarves_killed = 0  # DKILL
knife_location = None  # KNFLOC

The name of the variables are more clear than the comments so the comments has no use.


10. The class Dwarf(object) in model.py shows vertical formatting by putting the lines of initializing boolean variables together, and then put a blank line followed by defining the functions, which makes the class very clear. Also, the class Room(object) and Word(object) also show vertical formatting by putting the lines of code that are related close to each other and use bland line to separate different concept of codes.


11. All the tests pass after we put them with the main program in the same directory.
The tests meet the fast criteria since it takes few seconds, the independent criteria since they can be tested separately not based on each other, the repeatable criteria since everytime it is tested from the beginning, the self-validating criteria since they could return the result of whether the test is passed or not. But they do not meet the timely criteria since it covered only to 2011-02-15. 
