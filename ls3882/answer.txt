Assignment 4

1.
(1) Modular Programming: the program had been break down to many modules that had specific responsibilities.

(2) Classes: to keep functions organized, several classes were defined, such as 'game' module.

(3) Single Responsibility Principle: S.R.P. was applied in the 'message' class in 'model.py'only for message printing. 
 

2.
Meaningful names: Many variables/functions/classes were named properly in the code, such as variables is_dwarf and is_pirate in class Dwarf. 

Not meaningful names: In 'data.py', 12 functions were defined by names: section1, section2, ..., section12 which are not meaningful and can hardly be distinguished. Also, some functions used verbs rather than nouns as function names, e.g. function 'write'. 


3.
Only do one thing: 
(a) Class 'Pirate' only set the role to pirate by setting 'is_pirate' to true and 'is_dwarf' to false. 
(b) Function 'accumulate_message' in 'data.py' only append new message to the existing message dictionary.

Do more than one thing:
(a) Function 'move_to' in 'game.py' assigned 'loc' to 'newloc', assigned values to variables 'must_allow_move' and 'dwarf_blocking_the_way", validated them and etc.. 
(b) Function 'move_dwarves', similarly, also did a lot of jobs rather than one.  


4.
In function t_throw in game.py, if the dwarves_here is true, the funtion may not get a chance to check the following condition 
if self.is_here(self.dragon) and self.dragon.prop == 0:
if self.is_here(self.troll):
if self.is_here(self.bear) and self.bear.prop == 0:
which is a side effect and may cause errors. 


5. The following code from function 'finishi_turn' might be combined to a function. 

if hint.n != 5:  # hint 5 counter does not get reset
	hint.turn_counter = 0
if self.should_offer_hint(hint, obj):
	hint.turn_counter = 0


6.
Yes. In 'adventure.py', an EOFError was handled by pass. 
Input with special characters usually causes no output and needs to be terminated. 


7.
Class Game performed the entire game process in one class that contained too many functions. 


8.
The Game class is not cohesive because it included too many functions and attributes. 


9.
Approach: comment at variable initialization; comment the purposes of some function and reasons for some important steps. 
Good comment:
 # For old-fashioned players, accept five-letter truncations like
 # "inven" instead of insisting on full words like "inventory". (Warning of consequence)

Bad comment: 
self.contents = None  # so the bottle can hold things (redundant comment)
 # Properties of the cave. (position marker)


10. 
In function 't_unlock' of 'game.py', codes of every if statement were put togeter and variable t_lock was created and assigned right after t_unlock defined. 
  

11.
Tests failed and many exceptions raised due to inconsistent directory level with 'adventure'.

Fast: Yes. Ran 13 tests in 0.057s
Independent: Yes. Test files could be run independently.
Repeatable: Yes. The test could be repeated for the same result even it failed. 
Self-validating: Yes. Error message will be returned during test, thus it is self-validating. 
Timely: No such information provided. 
