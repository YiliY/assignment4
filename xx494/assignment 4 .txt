1.The three main techniques that were used to structure the program are classes, modules and single responsibility principle. Modules, such as adventure.py, game.py, are used to start the adventure, import the data and progress through the game. Classes, such as model.py, contain several different functions defining users¡¯ behaviors. A single responsibility principle, such as class hint in model.py in line 152 is used to structure the responsibility of the classes. 2.The author used meaningful names. In line 3 of play.py, load_advent_dat might mean that load adventure data from another file. In line 26 of play.py, _game.start() might result in start the game. But the author still used some names that were not meaningful. For instance, from line 59 in data.py, the author defined lots of functions named section1, section2 and so on. The names are totally non-meaningful.3. In game.py, the function write_message() in line 69 just does one thing ( self.write(self.message[n])). In line 54 of data.py, the function accumulate_message() just does one thing (dictionary[n] = dictionary.get(n,¡¯¡¯) + line + ¡®\n¡¯ )that is adding a message to the dictionary each time.There are some functions that do more than one thing each time.  In line 130 of game.py, the function start() is used to ¡®display instructions if the user wants them¡¯, and when the dwarves, pirates and treasure show in the room, the function will describe the locations.4.Some functions caused side effects. In line 188 of game.py, the function move_dwarves() has side effects because it does not just work on its input and make some output. The function depends on variables including dwarf_count, dwarf_attacks and knife_wounds. The output of this function would lead to self.die(). 5. In play.py line 11 and line 18, play() and resume() have several codes in common. In gaime.py line 57 and line 60, the two functions random() and choice() share the same function that is to generate a random number. They can be summarized by a function GenerateRandom().6. The game doesn¡¯t have an exception handling, since there is no code on this. But the game can handle the non-standard player input. For instance, when running the program in Terminal, I input ¡®we¡¯ and ¡®78¡¯, it will be shown that ¡®I don¡¯t understand that!¡¯ and ¡®I don¡¯t understand that word.¡¯ I did not find the input to terminate the game abnormally. 7.The Game class in game.py starting from line 19 has responsibility over more than one piece of functionality and in details it contains all functionalities in game.py. Some of the responsibilities can be specific classes respectively, such as adding messages, interacting with players and managing dwarf behaviors and death.8. As mentioned above, the Game class in game.py from line 19 is not cohesive. The attributes in Game class are too much and they are in plenty of methods. They should be divided into sub-classes.9. The author did good comments in Game class in game.py starting from line 19. The comments explained the each meanings of each line of code briefly and clearly. For instance, in line 21 ¡®look_complaints = 3 #how many times to ¡°SORRY, BUT I AM NOT ALLOWED....¡±¡¯ and in line 35 ¡®deaths = 0 # how many times the player has died¡¯.There are some bad comments. For example, in line 785 ¡®# do water and oil thing¡¯ didn¡¯t explain things on water and oil specifically. 10.In adventure.py, the loop() starting from line 19 is a good example of vertical formatting. The attributes are declared together in the beginning, and after that the author showed methods in different situations on save file, and finally the author declared methods on game not finishing. The blank lines were used properly as well. 11.After running the tests, there are 2 failures and some errors. The test did not pass.For the F.I.R.S.T. criteria, it refers to fast, independent, repeatable, self-validating and timely. The program tests run very fast. And tests can be run independently in any order, and repeatable at the same time. Some tests cannot be judged whether they have passed or not so they are not self-validating. In the README.txt, the tests were written on Feb. 15, 2011 and the latest version was Apr. 27, 2012. The tests are not timely.