Assignment 4
Kristen Kwan
kk3175

(1) Three main techniques that the author used to structure the program include the following:
MODULES
The author uses different modules to organize the program, which separates the code into different concerns that perform logically discrete functions. When these modules are combined together, they perform the function of the entire game. For example, the adventure.py module contains concerns related to the high level functioning of the game, including the baud rate,  starting a saved game, starting a new game, and processing user input commands. Meanwhile, the model.py module contains concerns about the classes representing the game components, including classes for words, rooms, movements, hints, messages, and game characters.

CLASSES
The author uses different classes to encapsulate related structural and behavioral components. For example, the Room class (model.py, lines 38-80) contains all of the functions related to describing the rooms, including actions that may be going on in the rooms (such as trying to catch a bird or deal with a snake) and functions that define the state of the room (such as whether the room is dark or above ground). 

SINGLE RESPONSIBILITY PRINCIPLE
The author sometimes uses the single responsibility principle when creating classes. For example, within the model.py module, each class is responsible for one piece of functionality; class Word (model.py, lines 82-101) is responsible for the functionality of words entered by the user's commands, while the Object class (model.py, lines 103-143) is reponsibility for the functionality of the physical objects in the game such as the grate or key.

(2) The author sometimes uses meaningful names and sometimes does not use meaningful names. 
Examples of names that are meaningful:
- The function move_dwarves (game.py, line 188) implies that the function is reponsible for moving dwarves during the game.
- The variable is_dead (game.py, line 34) is a meaningful name because it tracks the state of the player as dead or alive, and implies that it does so through the boolean states of true or false.

Examples of names that are not meaningful:
- Some of the functions in the data.py module are called section1 (line 59), section2 (line 64), section3 (line 67), etc. It is unclear what section these functions are referring to and the meaning of their sequential labeling. It is also unclear what behavior these functions are supposed to perform; it would be better to name the functions as verbs instead of nouns.
- The variable called foobar (game.py, line 27) does not give a description of the variable's purpose. It is not possible to figure out this variable's purpose based on its name.

(3) The functions in the code sometimes do one thing and sometimes do more than one thing.
Examples of functions that do one thing:
- The function called random (game.py, lines 57-58) does one thing (it returns a randomly generated value).
- The function called is_dark (game.py, lines 81-85) does one thing (it determines whether it is dark or not via the state of the lamp).

Examples of functions that do more than one thing:
- The function move_dwarves (game.py, lines 188-288) implies that the function is reponsible for moving dwarves during the game. However, the function also performs several other responsibilities including tracking the dwarf count and the state of dwarves' attacks.
- The start2 function (adventure.py, lines 130-147) displays game instructions if the user wants them in addition to performing other responsibilities such as setting up dwarves, pirates, and locations.

(4) One function that causes side effects is the describe_location function (game.py, line 323). Based on the name, the function should have the one responsibility of describing the player's location. However, one side effect within this function is to set the death of the character by evaluating if the character could fall and die and calling the die_here function (game.py, lines 327-330). This function has additional side effects, including evaluating the status of dark or light and potentially turning on a lamp (game.py, lines 352-372).

(5) In the play.py module, the play (lines 11-27) and resume (lines 29-38) functions have several lines of repeated code that could be made into one function related to starting up the game, regardless of whether it is a new game or a resuming game.

(6) The program does not use exception handling because there are no try statements and except clauses. However, the program does attempt to handle some potential errors, such as telling the player "I DON'T UNDERSTAND THAT!" or "I DON'T KNOW HOW TO APPLY THAT WORD HERE." when the player types an input that the program does not recognize. Typing Ctrl C causes the program to terminate abnormally.

(7) The Game class (game.py, starting at line 19) has more than one piece of functionality. According to the comment, the Game class is supposed to keep track of the state of the game. However, there are so many components to the state of the game that the program would be cleaner if several different classes or subclasses were made. In addition, the Game class is also performing responsibilities not directly related to keeping track of the state of the game, such as deciding which messages to give the player and moving the player through the game.

(8) Some of the classes are not cohesive; they contain large numbers of attributes and/or the methods do not manipulate these attributes very much or at all. Some of the non-cohesive classes include: the Game class (game.py), the Room class (model.py, lines 38-80), and the Hint class (model.py, lines 152-163).

(9) The author's approach to commenting the code varies between good and bad. 
Examples of good comments:
- The first line at the beginning of all the modules has a comment explaining the intent/purpose of each module. This is a very good use of commenting so the reader understands why the author made a particular module.
- Several of the classes in model.py have good comments which explain the intent of the class. For example, the comment for the Hint class (model.py, lines 152-153) clarify that the Hint class is used if the player needs a hint because they have loitered for too long. Likewise, the comment for the Room class (model.py, lines 38-39) clarify that a room is a location in the game.

Examples of bad comments:
- In prompt.py lines 5-6, the commenting is confusing and redundant in conjunction with the class ReprTriggeredPhrase having a non-meaningful name. The comment for this class never clarifies the abbreviation Repr and in fact uses the "repr" abbreviation without defining it.
- The function install_words (prompt.py, lines 28-29) does not have meaningful comments to support the understanding of the function, as "stack()[0] is this" does not make sense and is just noise.
- The comment for could_fall_in_pit (game.py, line 51) is "could the player fall into a pit?", which is redundant and therefore a bad use of commenting. 

(10) The vertical formatting used in the Room class (model.py, lines 38-80) makes the code clearer and easier for the reader to follow. All of the instance variables are declared together (lines 41-54) at the top of the class and are separated from the class functions by a blank line. All of the Room class functions are separated by a blank line and related functions are placed near each other (for example, the is_before_hall_of_mists function on line 71 is placed right before the is_after_hall_of_mists function on line 75).

(11) Running the tests within the tests folder resulted in 2 failures and 11 errors. Evaluating the tests on the basis of the F.I.R.S.T. criteria results in the following observations:
F - The tests are fast. 13 tests ran in 0.163 seconds. Note that when the tests are run from the adventure directory, all of the tests pass and the time to run the tests is 22.4 seconds.
I - From looking at the test codes, it appears that none of them are depending on each other to run. Thus, they meet the independence criteria. 
R - The tests are repeatable.
S - The tests provide feedback regarding whether they objectively pass or fail.
T - It is unclear whether the tests were written during code development. The Changelog in the readme file implies that the tests may not have been written at the same time since 100% test coverage was achieved after the first release date.
