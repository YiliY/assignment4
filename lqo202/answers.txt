Assignment 4
1.
The program is structured in modules, and some of them have one or more classes. At a first glance, there are  some comments that are to be in the correct places,  the code seems in order ,no error handling is found and some long functions appear to do many things (game.py) , but it seems to be a testing module .
In general terms, I believe the code is well organized but can be improved, and the main characteristics that the author has used in order to built it are:
*Structure: As mentioned, each module has its own concerns, for example module game.py just deals with all the game itself: movements, situations; while module model.py focuses on defining the utilities such as dwarfs, pirates, hints, messages to be used while playing the game (creating the model used in the game itself). Furthermore, the classes are well defined despite some not being small (game.py class game). There seems to be cohesion in most of the classes, many variables used by the methods, the more variables the more cohesive the class is.
*Formatting: Both vertical and horizontal formatting are well managed. Indentations is used in appropriate places, dependent functions are below the functions that call them, variables declared near to where they are used.
*Proper use of names: Most of the names are understandable, they give you a hint about what the function does. However, it is good to mention that some seem kind of generic. So there might be some opportunity to improve the code here.

2.
As mentioned in the previous question, most of the names are meaningful, but some of them are generic. These generic names can be in two ways,  enumeration in the name (data.py function section1, section2 …) which does not follow the advice of being a verbal phrase , but are understandable reading the comment at the beginning; or they can be well named but not saying what it does exactly  (game.py write.message, in several parts of the code) but instead calling a code, understandable but with looking at a detail or by being the person who wrote the code.
Meaningful names:
In game.py
self.bottle.contents: Variable to see if the bottle contains water
self.treasures_not_found: How many treasures the player has found 
Non meaningful names: 
In data.py
Section1: It creates a section, describes it or what?
In game.py
write_message(3): It is understandable for the comment, but without it it is impossible to know what message is going to be printed.

3.
Despite (most of) the classes having cohesion, some of the functions are too long and do several things at the time, and some even are not self explanatory of what they do, because of the name they have. 
Functions that do one thing in game.py:
    def i_hours(self, verb):
    def dont_understand(self):

Functions that do many things in game.py:
def t_carry : It refers carrying something, but it does not mention what. Even more considering that there are many things in the game. This is because the function is doing many things, by using ifs

4. Yes, in the module game.py, the function finish_turn (from the name it has) is supposed to just finish the turn of the player and show a message in the screen.However, it also sets the location of the knife. SO this is doing more than one thing, and is in fact a side effect.

5. Most of the code is already in a function. In my opinion, it is possible to see some code similarities, but not to transform them into functions. For example, in game.py, in several lines if are used with ishere(), but the if statements that they are in to are different. Besides it, their repetitiviness will fall apart if one gets splits the (long) function to several others that do one thing. With this we would have meaningful names, functions that have one task and are small.

6. There is no error handling, nor by using exceptions nor by using an error function. Nevertheless, there are some comments to be shown inside of some of the functions if the user does not input the desired value (y/n/yes/no for example), all arranged by if's (game.py def start and start2). 
As there is no generic treatment of the errors, this may cause the program to fail. For example, just by running the program, a questions appears. If we type  a symbol as the answer to the shown question, the program does anything, however if one inputs any letter or number (not y or n) it shows a message, that can be considered an error message.

7. As a principle stated in Clean Code (Martin) is that classes should be small as possible and has only one single responsibility, also that it is better to have many small classes that can be connected that a large one. In my opinion, most of the classes are cohesive in data.py and model.py, good examples are class data and class object respectively. On the other hand, in game.py class game which has long functions and it is pretty long. Even when the class does has in charge the responsibility of running the game actions, it can be split in more classes. For example, it could be separated in class game_initial_setup when all the attributes and functions of initializing the program would be, and another one of game_movementents in charge of moving the “characters” of the game. So this class has in charge more than one responsibility.

8. The classes found on module model.py and data.py are small, in charge of one responsibility and cohesive because they try to use the variables defined in each one. However, as explained in question 7, the class in game.py is too long, mainly because functions do many things at a time. Even where the variables are used many times in the different (and many) functions in the class, the extension of if, makes it difficult to track them. This class is definitely not cohesive, but has potential that each of the classes that result of the split of it are really cohesive, following Clean Code (Martin) in page 172.

9.As mentioned above, some of the names are not self explanatory, so they need to be  commented in order to be understood by the reader. So even when some comments seem to be in the proper place, this does not hold true for all.
Good comments>
In game.py
*    # Routines that handle the aftermath of "big" actions like movement.
    # Although these are called at the end of each `do_command()` cycle,
    # we place here at the top of `game.py` to mirror the order in the
    # advent.for file.
This comment can be found in the function start2, it is a explanation of the consequences.
*"""Start the game.""" in the start function
This is a public API, so it is a good comment.
Bad comments
In game.py
* # want instructions? : In the function start. This comment is to explain what the code is doing, mainly because the name is a generic one.
*  #2 : In the function move_to, it is a noise comment or a position marker, does not have to be there.

10. Vertical formatting has been used in the code, it can be seen in this part of the model.py class room. It is possible to see that the attributes are defined in the first part close to the functions they are used in. The functions follow the logic of being defined below the function that calls them, there are also blank lines that separate functions (in this case this would be the concepts).

11.  The files had to be copied into the main location (assingment4/adventure) in order to run the tests, they all ran OK, all passed (python -m unittest NAME). However, if we want to know if they are F.I.R.S.T.,  they will have to be:
*Fast: A couple of them took like 15 seconds, which in my opinion is a bit too long (test_commands and test_walks). So it depends on the threshold taken into account to be considerd low or fast and in the resources of the machine used. In my opinion, this is a characteristic the tests do not pass, for me they are slow.
*Independent: no matter the order in which one runs the three tests, they all five the same result, OK, so they are independent. Also, if one sees the codes, there are not references to the other ones.
*Repeatable: For the results, seems that the tests can be run in any environment.
*Self-validating: They do have a result “OK” to say that the test result was successful, so they are self-validating. 
*Timely: There is no certain way to know is they fulfill this requirement. It seems that this code was built in parallel, because of the similarity of the code; so it would be timely.
























