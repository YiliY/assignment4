1.
1) The author uses modular programming. Different modules are used to fill different concerns of the game. For example, game.py stores statu of the gameplay, and model.py keeps classes representing Adventure game components.
2) The author uses class organization to encapsulate state information and scontain functions that define gameplay behavior. Such example can be found in model.py. 
3) When it comes to functions in modules and classes, the author applies single responsibility principle. For example, model.py has a class named dwarf that stores information and behavior of dwarves. 

2. 
1) In game.py, is_dark(line 81) and is_dwarf_area(line 180) are examples of uses of meaningful names. Based on the content and comment, these two functions are part of description of the players location, and determine whether the player is at a dark location(is_dark) and whether the place is in dwarf's territory(is_dwarf_area).
2) In the same module(game.py), self.clock1(line 45) and self.clock2(line 46) are not meaningful names, because one cannot tell what information they store without looking at the comment.

3.
1) In game.py, is_dark(line 81) and is_dwarf_area(line 180) are examples of functions that only do one thing. is_dark determines whether the player's location is dark, and is_dwarf_area determines whether the player is on the dwarf's territory.
2) In the same module(game.py), the start2 function(line 130) asks if the player wants an introduction, and displays the introduction if requested, and resets information about treasure, dwarves, and other features. 

4.
One example of side effect could be found in game.py. The function move_dwarves(line 188), rather than producing only based on input, could also lead to results like self.die(), which should not be part of the function by the name of the function.

5.
I noticed that, in game.py, newloc=loc appeared multiple times(line 156, line 160, and line 174). They could be combined into a single function named set_loc()

6.
The program does use exception handling. For example, line 45 of adventure.py, it uses a loop(). I wasn't able to find any abnormal termination.

7. 
Yes. To me, the class game in game.py keeps track of gameplay, as well stars the game, controls the movement of both player and dwarves. These functionality could be in separate classes.

8. 
Most classes in the program are cohesive. However, the class game in game.py is not cohesive, as it possesses a large amount of attributes, and thus some functions of this classes can only manipulate a small proportion of these attributes.

9.
1) Good comments: line 21-36 in game.py
look_complaints = 3 # how many times to "SORRY, BUT I AM NOT ALLOWED..."
full_description_period = 5 # how often we use a room's full description
full_wests = 0 # how many times they have typed "west" instead of "w"
dwarf_stage = 0 # DFLAG how active the dwarves are
dwarves_killed = 0 # DKILL
knife_location = None # KNFLOC
foobar = -1 # FOOBAR turn number of most recent still-valid "fee"
gave_up = False
treasures_not_found = 0 # TALLY how many treasures have not yet been seen
impossible_treasures = 0 # TALLY2 how many treasures can never be retrieved
lamp_turns = 330
warned_about_dim_lamp = False
bonus = 0 # how they exited the final bonus round
is_dead = False # whether we are currently dead
deaths = 0 # how many times the player has died
max_deaths = 3 # how many times the player can die
These comments explain clearly what these values are and what they're for. 

2)Bad comments: in game.py, line 785, "do water and oil thing" is not a good comment because it's confusing and unclear.

10.
game.py line 21-36 can be a good example of vertical formatting, because the instance variables are declared together in this block, which makes it easier to read.

11.
After putting the needed modules (play.py for example) in the same directory with test programs, all these tests passed.
These tests satisfy F.I.R.S -- they were fast, independent, self-validating, and repeatable -- but not T, since we don't know when these tests were writte.
 


