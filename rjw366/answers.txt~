1. 	a. Contained in model.py are all the class objects used for adventure, although storing multiple classes in a single module is not a great practice, the structure of the classes is cohesive. Small amount of attributes and methods to mutate those attributes.

   	b. Throughout the code helpful variable names are used where possible. And where they aren't comments are left to explain. (I.e. "sleep(9. / BAUD)  # 8 bits + 1 stop bit @ the given baud rate" in adventure.py)

  	c. In data.py the different section methods, while maybe not the most usefully named, shows a good level of abstraction. As opposed to doing a sections() method with some sort of switch 

2.	Useful:	adventure line 38 - words - all the words from the user
		game line 1142 - rooms - mix of old rooms and new 				rooms where the user is located

	Useless:game line 1051 - t_lock, t_unlock
		game line 1065 - i_light, t_light

3.	One thing:	adventure line 13 - baudout(s)
			Most methods within model.py classes
				_eq_(), is_at(), carry()

	Multiple things: Both play() and resume() in play.py feel like 			they do more than the method says. That may be because 			of their simple names but both start with the same 			lines that seems like they could be put into an 		initializeGame() function of some sort
