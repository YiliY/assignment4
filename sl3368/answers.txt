1.
(1) use modules to separate the program in order to make the program more readable and easier to understand.

(2) use classes to organize and combine both structural and behavioral components, for example attributes and functions. Then, use a name to describe the responsibility it fulfills.

(3) use related functions in each class and fulfill cohesion principle. 

2.
meaningful names: (1) is_light(model.py line 46) clearly specifies whether the room is light or not, and the initial status is dark. (2) the function is_dark(model.py line 79) determines if the room is dark or not. (3) the function compute_score(game.py line 1649) clearly shows that it is used to compute the score a player got from the game.

unmeaningful names: (1) functions from section1 to section12(data.py line 59-193) are all unclear names because we cannot understand what does each function do by knowing its name. (2) functions do_command(game.py line 427) and _do_command(game.py line 433) are hard to be differentiated by reading their names.

3.
only do one thing: (1) function carry(model.py line 130) determines if the object is being carried. (2) function drop(model.py line 134) determines if the object has been dropped. (3) function destroy(model.py line 142) determines if the object has been destroyed.

do more than one thing: (1) start2(game.py line 130): displays instructions; resets the location; establishes dwarves and pirate; counts the number of treasures that are not found. (2) function section3(data.py line 67) also do more than one thing

4.
(1) the function move_dwarves(game.py line 188) may cause side effects. Although the function's name is move_dwarves, it may lead to self.die() at the end, which is not implied by the name of the function. (2) Also, the function describe_location(game.py line 323) would cause side effects, because it may also lead to self.die_here(), which is not implied by the name of the function.

5.
(1) the functions play(play.py line 11) and resume(play.py line 29) share several lines of code. (2) two functions random(game.py line 57) and choice(game.py line 60) do nearly the same thing and could be combined as one function.

6.
YES, the program uses exception handling. There is an exception handling in the function loop(adventure.py line 19), which uses try/except to test the function. I could not find any input that causes the program to terminate abnormally, because when I enter some invalid inputs, the program will give me some error messages, like "I DON'T KNOW THAT WORD". However, some commands, for example "ctrl+c", can terminate the program.

7.
YES. The class Game(game.py line 19) is a very large class that has responsibility for all the functionalities in the game.py. Thus, this class definitely has responsibility over more than one piece of functionality and should be better separated into several subclasses.

8. 
Most classes are cohesive. However, like question 7, the class Game(game.py line 19) is not cohesive. Actually, the class Game is too large to being cohesive, because it has so many attributes.

9.
good comments:
(1) In the class Game(game.py), there are many good comments to make us easier to understand. For example, def start(self): """Start the game.""". This comment specifies what the function start really does, since there is another function start2 with the similar name as start.
(2) functions in the class Game(game.py) like 
look_complaints = 3  # how many times to "SORRY, BUT I AM NOT ALLOWED..."; 
full_description_period = 5  # how often we use a room's full description; full_wests = 0  # how many times they have typed "west" instead of "w";
dwarf_stage = 0  # DFLAG how active the dwarves are
are all good comments to further explain their meaning.

bad comments: 
(1) the comment "# IF LOC.EQ.0 ?"(game.py line 179) does not show anything useful but confusing.
(2) the comment  "# do water and oil thing"(game.py line 785) actually has no meaning for readers. It might be useful for the author, but useless for us.

10.
A very good example that the author uses vertical formatting to make the code cleaner is the class Game(game.py). In this class, the author first lists all the instance variables together at the top of the class, then keeps related(closed) functions together. Also, different functions are separated by blank line. Thus, we, as readers, can easily understand how the class works vertically.

11.
After moving the files from the subdirectory 'tests' to the directory 'adventure', all the tests are passed by using the command 
"python -m unittest discover"
For the F.I.R.S.T. criteria:
(1) Fast: These tests run fast on my laptop, so meet the F criteria.
(2) Independent: the tests here do not depend on each other, so meet the I criteria.
(3) Repeatable: The tests are obviously repeatable, so meet the R criteria.
(4) self-validating: The tests will return errors when they failed(either pass or fail), so meet the S criteria.
(5) Timely: According to the README.txt's changelog, the 100% test coverage, feature-complete is on 2011 February 15, which is later than the date of the first public release(on 2011 January 31), so do not meet T criteria.





