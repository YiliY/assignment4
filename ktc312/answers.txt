Assignment 4

Q1.Describe three main techniques that the author used to structure the program.
Modular Programming, the author separate the function into modules, in which every module do only one thing and can be reuse or combine with each other in the program to perform different needs.
Class, the author use class to define behavior of different object.
Command Query Separation, when the function needs to return something, it calls other function do the  calculation.

Q2. Has the author used meaningful names? Give some examples of meaningful names used and what you think they mean. Give some examples of where the author has not used meaningful names.
Meaningful names like “dwarves_killed = 0” the number of dwarf been killed, “is_dead = False” is the player dead or not.
Not meaningful names like “lamp_turns = 330”, “self.clock1 = 30”, “self.clock2 = 50”

Q3. Do the functions used in the code do one thing? Give some examples of functions that only do one thing. Give some examples of functions that do more than one thing.
function that only do one thing: 
def accumulate_message(dictionary, n, line):
	dictionary[n] = dictionary.get(n, '') + line + '\n'
function that do more than one thing:
def t_blast(self, verb, obj=None):  #9230
	if self.rod2.prop < 0 or not self.is_closed:
		self.write(verb.default_message)
		self.finish_turn()
		return
	if self.is_here(self.rod2):
		self.bonus = 135
	elif self.loc.n == 115:
		self.bonus = 134
	else:
		self.bonus = 133
	self.write_message(self.bonus)
	self.score_and_exit()

Q4. Do any of the functions cause side effects? If so, which ones? 
def make_object(dictionary, klass, n):
	if n not in dictionary:
		dictionary[n] = obj = klass()
		obj.n = n
	return dictionary[n]

Q5. Can you find any repeated code that could be made into a function?
Maybe no need to rewrite the random function.

Q6. Does the program use exception handling? Can you find any input that causes the program to terminate abnormally? Hint: run the program from the terminal prompt. The invalid input may not be normal text.
if __name__ == "__main__":
    try:
        loop()
    except EOFError:
        pass
if exception occur, the program will just pass

Q7. Do any of the classes have responsibility over more than one piece of functionality. If so, which ones?
class Game(Data)
contains objects in game and behavior in game.

Q8. Are the classes cohesive? List any that aren’t.
class Message(object):
    """A message for printing."""
    text = ''

    def __str__(self):
        return self.text
only one method

Q9. Describe the author’s approach to commenting the code. Provide examples of good and bad comments that have been used in the code.
Good comments:
    # Routines that handle the aftermath of "big" actions like movement.
    # Although these are called at the end of each `do_command()` cycle,
    # we place here at the top of `game.py` to mirror the order in the
    # advent.for file.


bad comments:
	self.clock1 = 30                # counts down from finding last treasure
	self.clock2 = 50                # counts down until cave closes
should use meaningful names

Q10. Provide an example of where vertical formatting has been used to make the code clearer.
class Dwarf(object):
    is_dwarf = True
    is_pirate = False

    def __init__(self, room):
        self.start_at(room)
        self.has_seen_adventurer = False

    def start_at(self, room):
        self.room = room
        self.old_room = room

    def can_move(self, move):
        if not isinstance(move.action, Room):
            return False
        room = move.action
        return (room.is_after_hall_of_mists
                and not room.is_forced
                and not move.condition == ('%', 100))

use the blank line to separate new concept. 

Q11. Run the tests provided with the program. Do they pass or fail? Do you consider the tests meet the F.I.R.S.T. criteria? Provide details of why they do or do not meet the criteria.
Fail, “AttributeError: 'module' object has no attribute '/home/ds-ga-1007/'”
Fast – it's fast
Independent – there are many independent test like data, commands...
Repeatable – since I can run it, means it meets this criteria
Self-validating, Fail because of an error, I can't really tell the result of the test
Timely – don't know when is the test been wrote
