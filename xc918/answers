Xing Cui
xc918

1. The three main techniques that the author used are packages, modules, and classes.
First, by dividing this program into many modules with different concerns and purposes
respectively, such as: data.py parses game data files including information of construction
objects and messages from each scene; game.py that including communicate with the player,
and adventure.py that starts the adventure.
Classes are the second technique. In this game, classes contain many different
functions to describe the players behaviors. model.py is a class that has many different
functions that could be imported by game.py, as Room, Message, Dwarf, and Pirate.
The last technique the author used is function. In game.py, line 433, _do_commands is a
big function that has been used a lot. Similarly, there are many functions since we want to
reduce duplications in the entire program.


2. Some meaningful names that the author used could be found in model.py. For example,
between line 41 and line 54, meaningful names are is_light, is_forbidden_to_pirate,
trying_to_get_into_cave, and the like. The author used nouns and those names do mean the
thing that showing in the expression. Moreover, in game.py, there are also some meaningful
names contains meanings as shown in the name, such as Dwarves_killed means the number of
dwarves are killed.
Some not meaningful ones could be found in game.py on line 45 and 46, clock1 and clock2 are
meaning “counts down from finding last treasure" and “counts down until cave closes”, which
would be hard to know in the future using of these two. Moreover, on line 114 “start()” shows “Start the game”, but on line 130 “start2()” is really vague because it makes some confusion from start() since there is no description in the name itself and they are too similar.


3. There are functions that only do one thing such as line 81 and 109 in game.py, the function is_dark() and is_finished(). They, respectively, is only related to lamp or is_dead or is_done.
There are functions that do more than one thing such as in line 130 game.py, the function
start2(). The description shows “Display instructions if the user wants them,” and it describes the locations as long as the dwarves, pirates and treasure appear in the room.


4. A function called “move_dwarves()” is on line 188, game.py. It depends on several variables, dwarf_count, dwarf_attacks, and knife_wounds(line 210), and the results from this function could lead to self.die()(line 318), which is not implied by the name of function. Therefore, function move_dwarves has side effects since it is not a function that purely operates on its input and produces some output.


5. Line 58 and 61 in game.py, there are two similar one:
return self.random_generator.random()
return self.random_generator.choice(seq)
These two functions are generating a random number, thus, they could be combined as one
function, for example randomNumGenerator().


6. There is an exception handling in adventure.py, after line 42, which uses try to test and
except loop() function. I did not find any inputs could terminate the program, but Ctrl+c/z works to terminate the program.


7. In model.py, there is the one has responsibility more than one piece of functionality. The information for is_dwarf and is_pirate state functions in Dwarf(object) and the later
Pirate(Dwarf).

8. In game.py, line 19, class Game() is one class is not cohesive. It has so many attributes are being manipulated in different methods, which could be separated into many subclasses.


9. In the biggest module game.py, there several good comments and bunch of bad ones.
Good comments: line 19, the class Game(), besides those meaningful names, the comments
are very specifically explaining what is this name and what does the value mean. Line 148 and 218 are giving two good examples that explains the above code. Line 290 is giving a comment that explains the following code.
Bad comments: Line 124, “#setting things going” is not a good one because here should explain what are setting up. Line 785 “#do water and oil thing” is a confusion.


10. Vertical formatting examples could be found in many places. in data.py, class Data() and
function section1-12 are a good examples. Data() gives the initial functions/values before
everywhere else use them, and functions give good formatting that related functions are put in order.


11. There is no return for running test_walks.py and test_data.py, and I cannot run
test_commands.py since modules are not on the same level. By considering F.I.R.S.T. criteria, they do ran fast, and they are independent, and they are definitely repeatable. Since the test is neither pass nor fail, it is hard to say the Self-validating is satisfied. Last, it is not timely since the content in README.txt shows that the most recent version was published in April 27, 2012.
