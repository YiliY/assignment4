1,
The author uses module, class, and function to structure the program. 
The author builds different modules, such as adventure,py, data.py, and model.py. Those modules serve different purposes in the program.
He also uses class to contain different kinds of information, such as many classes we see in model.py.
Lastly, he uses functions for specific and various tasks, as we can see through the whole program. 


2,
Yes the author has used a lot of meaningful names. Two examples are, 
--dwarves_killed, how many dwarves have been killed (game.py, line 25)
--treasures_not_found, how many treasures have not yet been found (game.py, line 29)

Examples of where author has not used meaningful names,
--Functions such as section1 (data.py line 59), section2 (data.py line 64), etc,. I don’t get any information regarding to the purpose of this series functions just by reading their names.


3,
Functions only do one thing:
game.py line 57, line 60
          --def random(self):
        return self.random_generator.random()
          --def choice(self, seq):
        return self.random_generator.choice(seq)
Functions do more than one thing:
game.py line 153, move_to function
game.py line 188, move_dwarves function 


4,
Discussion with classmate Shixin Li
describe_location (game.py line 323) causes side effects. It might lead to self.die() (line 329), which is not implied by the name of the function. 


5,
Functions is_aboveground (model.py line 67), is_before_hall_of_mists (model.py line 71), and is_after_hall_of_mists (model.py line 75) can be combined into one function. 


6,
Yes, I found one exception handling testing for inputs of the function loop in adventure,py line 42. For inputs consisting of special characters such as *&^%$, there is no outputs returned by the program. Commands such as ‘control+c’ terminate the program. 


7,
Class Object (model.py line 103) has more than one functionality. It contains information regarding to objects in the game and takes actions that player can execute to the objects.
Class Game (game.py line 19) has more than one functionality too. In fact, this class takes all functionalities in game.py. 


8,
Yes, most of the classes are cohesive, but Class Game (game.py line 19) doesn’t have a high degree of cohesion. Because this class is so big and it takes too many functionalities and variables. Some functionalities are not strongly related and some variables belong to only limited part of the class. 


9,
the author uses comments to explain purpose of some classes, modules, and functions, such as comments under class names in model.py and comments in game.py line 37
the author uses comments to explain meaning of some variables, such as comments in game.py line 27 ~ line 36
the author uses comments to explain how the code works in mechanics of the game, such as in game.py line 174 ~ line 175.
Above is the author’s main approach and purpose of commenting the code. There might be some small comments that serve different purposes.  

Examples of good comments,
-- Comments under class names in model.py, since they explain purposes of classes and make it easier for readers to understand the program. 
-- game.py line 45, 46. It explains what clock1 and clock2 mean, meaning of which readers can hardly understand without reading the comments. 

Examples of bad comments,
-- game.py line 179 # IF LOC.EQ.0 ?. I don’t understand what the comment means here. This comment causes more confusion. 


10,
Function section3 (data.py, line 67)


11,
--If I run the tests without moving files in tests directory to its parent directory, on my terminal it shows 
“Ran 13 tests in 0.098s

FAILED (failures=2, errors=11)”
So in this case, the tests fail.

--But if I move files in tests to its parent directory before I run the tests, all tests pass. 

I use command ‘python -m unittest discover’ for both cases. 

I also tried to run some of the files individually, but there is no output.

--Fast: Yes. I would say tests are fast enough since in both cases they run fast.
--Independent: Yes. The tests do not depend on each other and can run in any order. 
--Repeatable: Yes. I tried to run the tests outside virtual box and they worked perfectly.
--Self-validating: I don’t think so. Because there are occasions where I don’t know if the tests pass or fail.
--Timely: No. Because in README.txt, we see that the author finished 100% test coverage after their first public release. 
 





    



