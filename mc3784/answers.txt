1. 
-The program is object oriented.
-The program is modular (separated in different files)
-The author separated the model (mainly in the class model.py) from the flaw of the game (mainly in the file game.py)

2. 
Examples of meaningful name:
-dwarf_blocking_the_way: tell if there is a dwarf blocking the way
-move_dwarves(self): move a dwarf from one location to another one 
-knife_wounds: count the number of knife wounds the player received

Examples of not meaningful names
-foobar (line 27 of game.py)
-h (line 259 of game.py)


3. 
Same of the function in the program do just one thing, others appear to perform a list of different things.

Examples of function that make just one thing:
-write(self, more) (line 63 of game.py)
-is_dark(self) (line 81 of game.py)
-do_command(self, words) (line 427 of game.py) 
-die_here(self) (line 767 of game.py)

Examples of function that do more than one thing:
-move_dwarves(self) (line 188 of game.py)

4. 
Even though there are many function that do more then one thing I couldn’t find any of them that appears to have unintended side effect.

5.  


6. The program doesn’t use a lot of exception handling. It uses just in a few line as at line 43 of adventure.py 

7. 

8. 
The classes seam all cohesive. 

9. 
The author’s approach to the comments:

good comments:

# Check whether we should offer a hint.(line 389 of game.py)

bad comments:
Line place holder: they are considered bad comments. Even though in this case the author explain at the beginning of game.py that they are placed so to have a reference to the Fortran equivalent program .

foobar = -1  # FOOBAR turn number of most recent still-valid "fee" (line 27 of game.py): Comment shouldn’t explain the name of a variable that could explain itself with a better name.


10. 
In the function:
do_motion(self, word) (line 269 of file game.py)
vertical formatting has been used to make the code clear. 

