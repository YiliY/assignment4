<1> 

To begin with, the program is divided into two packages, the actual game package and the test package located into the /test folder. 

Other technique used by the author is modular programming, dividing the program into different modules, to know: 
	- __init__.py
	- adventure.py
	- data.py
	- game.py
	- model.py
	- play.py
	- prompt.py

He makes use of classes to structure the program. 
The class "Game" (data.py line 19), for example, is used to store the state information about the current game into different attributes (as the "is_dead" attribute, which will be true when the character is dead). It also defines the methods associated with that class (like "do_motion"(game.py line 629) or "describe location"(game.py line 323)). 
Classes are also used to identify different game objects or characters that appear during the game. These classes are defined in model.py module. Some game items that are defined here are rooms (class Room (line 38)) and dwarfs (class Dwarf(165)). In these cases, the state information is stored as well as the behavior of each object, for example if a dwarf can move or not (model.py line 177). 



<2> 

In this program we can find examples of meaningful names used to name variables or functions along with several other non-meaningful ones. 

	- Meaningful names:method		
		> "is_aboveground" function associated with the "Room" class (model.py line 67) clearly returns a boolean value indicating if the room is aboveground or not. 
		
		> Method load_advent_dat (play.py line 3) loads the information in the advent.dat file for the current game.

		> Method "say_okay_and_finish" (game.py line 376) does exactly what is expected: it writes a message and finishes the turn. Maybe say_okay_and_finish_turn might be more adecuated. 

		> Attribute "dwarves_killed" (game.py line 25) and "treasures_not_found" (game.py line 29) are examples of well named variables. First one is a counter indicating how many dwarves were killed while the second one keeps the track of how many treasures where not yet found. 

	- Non-meaningful names: 
		> "yesno" method (game.py line 72) from "Game" class. According to the comment of the function it asks a question and prepares to receive a yes-or-no answer. There is no way to tell that from the name without reading the comment. An alternative name would be "askYesNoQuestion". There is another problem with this function, it attemps to do two things, actually ask the question and prepare for an answer. 

		> "start2" method in "Game" class (game.py line 130) is an example of poorly named method. There is no way to know why there are a "start" and a "start2" method in the Game class. The comment explains that the method is there to print the instructions if the user asks for them. Maybe a method called displayInstructions might be better. This function is also doing more than one thing, so naming properly seems complicated. 

		> Attribute "liquid" in the class Room (model.py line 48) gives no clue about what will be stored in the variable. 

		> Methods "do_command" and "_do_command" (game.py lines 427 and 430) are a clear example of poor naming conventions. Both functions are called almost the same but they do different things. 


<3> 

There are functions that do only one thing as well as functions that do more that one thing. 
	- One-thing functions: 
		> inventory (game.py line 88): returns the a list representing the inventory. 
		> objects_here (game.py line 99): returns a list of the objects in the room. 
		> compute_score (game.py line 1649) computes and returns the score. 

	- More-than-one-thing functions: 
		> There are several functions that do one thing and then finish the turn, for example, say_okay_and_finish (game.py line 376), describe_location (game.py line 323), dont_understand (game.py line 612) among several others. Practically all this functions are doing something else and then finishing the turn, which will account for 2 things in the same function. 
		> die (game.py line 772) does several things, it increases the number of deaths, sets the value of is_dead to true, prints a message and exits the game.
		>  score_and_exit (game.py line 1698) does at least two things, calculates the scores and exits the game. 
		> loop function (adventure.py line 19) does several things. Parses the options for the first run, loads an old game if required, checks if the game is over and acts as an interpreter for the commands introduced by the used while playing. 


<4> 

Side effects are operations that are outside of what the function is intended to do and there are several examples along this code. 

The "start_closing_cave" method (game.py line 130), for instance, sets the value for self.is_closing to true but also destroy trolls, bears and modifies values in self.chain and self.axe. 

Other example is the method "describe_location" (game.py line 324) might call the function die_here() which is clearly a side effect. Besides describing the location where the character is, it might kill him under certain circumstances.

To end with, the function "move_dwarves" (game.py line 188) might cause a pirate to steal the treasure calling treasure.drop(self.chest_room) (line 283) and even worst, it might end calling self.die() in line 318 causing the character to die. 


<5> 

I couldn't find any significative ammount of repeated code that might deserve the creation of a function. The only case might be in the play.py module where the first 3 lines of the functions play and resume are repeated. 

<6> 

There is a try statement on line 1554 of game.py but the except statement is not there to handle any exception. 

Apart from that, the author uses error handling by checking if the input matches with known words from its dictionary of words in the dispatch_command method (line 512 of game.py). It also gets rid of special characters in the input by using "re.findall(r'\w+', line)" (line 38 module adventure.py). 

He also checks if you are trying to override an existing file when saving the game in game.py line 1546 under the t_suspend method. 

One imoprtant thing that he does not check is the arguments when excecuting adventure.py. For isntance, if you try to load a "saved game" which doesn't exist, the program crashes. It never checks if the file exists before trying to open it: 

	$ python adventure.py nonexistingfile
	Traceback (most recent call last):
	  File "adventure.py", line 44, in <module>
	    loop()
	  File "adventure.py", line 33, in loop
	    game = Game.resume(args.savefile)
	  File "/home/mint/DS/1007_DS_GA/Assignments/04/assignment4/adventure/game.py", line 1570, in resume
	    savefile = open(obj, 'rb')
	IOError: [Errno 2] No such file or directory: 'nonexistingfile'

There is one input that breaks the code though. According to "raw_input" function documentation "If the user hits EOF (Unix: Ctl-D, Windows: Ctl-Z+Return), raise EOFError.". This exception is actually hitting the "except EOFError" in adventure.py line 45 but it doesn't do anything about it so the program suddenly stops. 
A way to actually handle this exception would be to change line 37 in adventure.py which reads: 
	line = raw_input('> ')
with: 

	try: 
        line = raw_input('> ')
    except EOFError: 
        print('EOF is not a valid entry!')
        line = ' '


<7> 

The class Game has responsability over several functionalities, such as starting and ending turns, evaluating the user inputs, character movements and actions, managing the inventory among several others. Game class is multipurpose. 


<8> 

In this code you can find cohesive classes as well as non-cohesive classes. To give some examples. 
	- Cohesive classes: 
		> Message (model.py line 145). Maximally cohesive, it only has the variable text which is used in its only method __str__. 
		> ReprTriggeredPhrase (prompt.py line 5). In this class all the variables defined (self.game and self.words) are manipulated in all its methods. This one is maximally cohesive as well. 
		> Move (model.py line 3). This class is cohesive as well. It has only one method (__repr__) which manipulates 3 out of the 4 attributes defined in the class. 

	- Non-cohesive classes: 
		> Game (game.py line 19). There are lots variables defined within this class (more than 28), and there are methods that use few of them. For example the "yesno" method (line 72) manipulates only three different attributes and the "inventory" method only two. 
		> Room (model.py line 38). Another example of a very low cohesive class. It has 14 variables and the methods defined manipulates only 3 of them in total. 


<9> 

There are several kinds of comments along the code. Some of them can be considered as good comments while others are clearly bad ones. Below some examples. 

	- Good Comments: 
		> Module adventure.py line 15:         
			sleep(9. / BAUD)  # 8 bits + 1 stop bit @ the given baud rate
		This comment provides human readable information about the baud rate being set. 
		> Module prompt.py line 10: 
	        self.words = tuple(words)  # protect against caller changing list
	    The comment is an explanation of intent for that line since it might not be ovious why is there. 

	- Bad Comments: 
		> #NNNN. There are several comments making reference to a number al along the code (for example in game.py lines 478, 844, 491). Apparently this comments make reference to the original Fortran code, but they are noise comments in here. 
		> Lots of redundant comments in the variables definition of the class Game (game.py lines 21 to 51). All the variables are explained with a comment even when the variable name is self-descriptive or when the comment is less descriptive than the variable name. 
		> Misterious comments (noise). In line 180 of game.py there is a comment that reads "# IF LOC.EQ.0 ?". 


<10> 

The loop function in adventure.py module (line 19) is a good example of vertical formatting. The function is divided into blocks of code, the first block related with the parser, then an empty line and a if/else statement block, followed by another empty line to divide it from the while loop below.

<11> 

Tests didn't work in the first attempt since the files needed to use the game were in a different directory. After copying all the necessary files into the tests folder all the tests ran properly:

$ python -m unittest test_commands test_walks test_data
..............
----------------------------------------------------------------------
Ran 14 tests in 6.014s

OK

About the F.I.R.S.T. criteria: 


-Fast: all the tests ran in 6 seconds, which is a short time to excecute 14 tests, so they comply with this rule. 
-Independent: Each test is independent from each other and the order of excecution doesn't change how they run. Meets criteria. Furthermore there are no imports from other test module. 
- Repeatable: As far as the test modules have access to the files within the adventure folder and the .txt files the tests seems to be completely repeatable. 
- Self-Validating: When excecuted with the -v (verbose) option it clearly shows that each test is ok or fails. It complies. 
- Timely: There are some tests mentioned in the TODO file, which means that are tests that still needs to be implemented in the already runing code. It doesn't meet this criteria. Moreover, acording with the changelog in the README file, the first release was prior having full test coverage. 


<OBS>

Trick to get some more lives in the game: 

In [28]: savedFile = file('./<saved_file>')
In [29]: savedGame = pickle.loads(zlib.decompress(savedFile.read()))
In [30]: savedGame.max_deaths = 999999
In [31]: SavedFileModified = open('<modified_file>','wb')
In [32]: SavedFileModified.write(zlib.compress(pickle.dumps(savedGame),9))
In [33]: SavedFileModified.close()

This also makes the compute_score method (game.py 1670) to compute a much higher score, making the next quit to return: 

YOU SCORED 9999996 OUT OF A POSSIBLE 10000310 USING 2 TURNS.
ALL OF ADVENTUREDOM GIVES TRIBUTE TO YOU, ADVENTURER GRANDMASTER!
TO ACHIEVE THE NEXT HIGHER RATING WOULD BE A NEAT TRICK!
CONGRATULATIONS!!
