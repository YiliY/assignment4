1. The program is structured as a package, with several files (modules) within it. The modules contain related things in the same file. Some modules contain classes to encapsulate state and behavior. The Model module contains a series of classes that constitute the game’s model, for things like objects, instructions (words), and hints. Modules also often contain methods that are outside a class that relate to the class in the module. Or, for example, the play.py module contains only functions.

2. In general, the author uses meaningful names. For example, the function that returns a boolean that is true if the game is over and false otherwise is called Game.is_finished() (game.py:109). The class itself, Game, stores the game state (game.py:19). The function that loads the advent.dat data file is called load_advent_dat (play.py:3) (though that could also be called load_game_config_data or load_game_data_file or something, which would not bake in the actual file name). Objects have a boolean attribute that stores whether it is in the player’s inventory, which is called Object.is_toting (model.py:115, although it would probably be better if it were Object.is_in_inventory).

Other names are not very clear. For example, the game class has two startup methods: Game.start (game.py:114) and Game.start2 (game.py:130); the author needed a comment to explain that start2 is for displaying the instructions at startup. A better name would be start and start_with_instructions, for example.

Similarly, the game class has a “clock1” and “clock2” attribute (game.py:45-46). They could be named treasure_countdown_clock and cave_close_countdown_clock for clarity.

3. Game.write_message only writes a message (game.py:69). The function Object.is_at(self, room) (model.py:127) returns a boolean with whether the object is in that room. The Game.compute_score (game.py:1649) is pretty long, but all it really does is tally the score.

A lot of functions do way too many things. Game.move_dwarves (game.py:188), among other things, test the player’s location, moves the dwarves around, moves the knife around, writes various messages, etc.

Game.describe_location (game.py:323) writes messages based on the location, but also checks to see if the player falls to their death, and finishes the turn in the end.

4. Yes, there are a number of side effects. For example, Game.wake_repository_dwarves actually ends the game (Game.py:1647). Game.move_dwarves doesn’t just move dwarves, but causes them to attack, so the player may die in the process (Game.py:318).

5. In Game.compute_score (game.py:1649), the author repeatedly adds a value to the maxscore variable and then adds a different number to the score variable. They could create a function with a score value and a maximum value, which would increment each by the respective amount.

6. There are two try blocks. One is to run the main game loop; an end of file exception is caught and silently passes. The other is encountered when saving a file, though no exceptions are caught.

If you pass the Unicode end-of-text character (U+0003), the raw_input call at adventure.py:37 will throw a KeyboardInterrupt. Also, if you type control-C, then it will issue a KeyboardInterrupt.

7. The Game class stores the game state (e.g. score, set of rooms, time limits), but it also stores information about the player themselves (e.g. location, inventory); the player could have their own class. It also does things like move dwarves, rather than that functionality being in the Dwarf class.

8. The Game class is not very cohesive. It parses commands, but it also acts directly upon dwarves and the player, rather than relegating that to appropriate classes.

9. The author does not provide extensive comments. Many of the comments are used to indicate where similar functionality is located in the original FORTRAN program.

A good comment is e.g. at game.py:651 “# no direct route is available”; it tells the reader the significance of the else clause. Also, game.py:863 “# They must mean they want to fill the bottle.”; this tells the reader how the program is interpreting the command – if the player types “carry water” when they have the bottle but the bottle is not filled with water, it must mean they want to fill the bottle with water.

Another good comment is at game.py:880 “self.finish_turn(obj)  # needs obj to decide to give hint” Normally Game.finish_turn does not need to take any parameters, but the comment makes it clear why, in this case, the object obj does need to be passed to the method – it is used by Game.finish_turn when calling Game.should_offer_hint.

The comment beginning at game.py:218 is also good. It explains why the locations need to be sorted, alerting the reader to the potential dangers of changing the locations objects with respect to testing.

A bad comment is, eg, at game.py:396 “# hint 5 counter does not get reset” It tells us that the counter does not get reset, which we can see from the code, but it doesn’t explain WHY: what is hint 5? We have to look it up.

Another bad comment is data.py:57 “# Knowledge of what each section contains.” It’s not clear what it’s supposed to tell us. That the following function provide that knowledge? That they require that knowledge? But we would know that anyway. The author DOESN’T tell us what each section is, e.g. “Parse rooms”, “List of possible commands”, etc.

Also, data.py:93 “# special computed goto”. What does that mean? Why is the accompanying code necessary?

10. At data.py:38, there is extra space, with a comment, to make it clear that the functions below are helper functions and not a part of the class.

11. There are 14 tests, which all pass. They run pretty quickly, so they are Fast, the first of the FIRST criteria. The tests are also generally Independent, since they each can be run in any order. The exception would be if the two text files, vignettes.txt and syntax.txt are thought of not as single tests but as multiple tests. Because the game has a certain progression, to test that you need to build up a series of commands/moves/turns. Each output is tested separately, but in fact they all depend on the tests that were run before. For example, you can’t test that the command “get emerald” (vignettes.txt:139) produces the correct output until you move into the room with the emerald. But, since vignettes.txt is run as a single test, everything is run in the right order, and the vignettes.txt test can be run before or after, say, the test_commands tests. Thus I think it satisfies the Independent requirement.

The tests are Repeatable, since they can be run any number of times, in any environment, without changing the results. Everything depending on random values is set up so that passing an initial seed, which is set explicitly by the tests, means that the outcomes will always be the same.

The tests are self-validating because it is very clear whether each one passes or fails; either a command does or does not produce the right output, for example. There is no question that a failure is a problem.

The last criterion is “Timely”; I don’t know when the tests themselves were written, compared to the rest of the code. But, in numerous places in the code, the code is set up to allow for easy testing. For example, game.py:223 sorts the locations so that, when the game is run with a certain seed, it always produces the same walkthrough of the game. This, to me, indicates that the author was thinking about testing as they were writing the code, and ensuring that the code was testable.



