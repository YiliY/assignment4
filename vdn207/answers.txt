                                						Assignment 4 - vdn207 - DS-GA 1007

Question 1
----------

The 3 main techniques used to structure the program are:
    
    a) Modular programming: There are 5 modules which are required for running the program. Each module represents different aspects of the application. 

    adventure.py - Line 1 - """Offer Adventure at a custom command prompt."""
    play.py      - Line 1 - """The Adventure game.""" - associated with just playing a new game or loading a resumed game. 
    game.py      - Line 1 - """How we keep track of the state of the game."""
    model.py     - Line 1 - """Classes representing Adventure game components."""
    data.py      - Line 1 - """Parse the original PDP ``advent.dat`` file.""" - required for tracking the tasks and appropriate responses during the game.

These modules interact together to make the whole program run. 

    b) Object Oriented Programming (Classes) - This programming paradigm is employed to chracterize different entities in the game. There are 3 classes used in the program.
    
    game.py  - Line 19 - Class Game
    model.py - The whole module defines classes to model the entities in the program.
    data.py  - Line 24 - Class Data

    c) Single responsibility principle - Each class defined in the modules are solely responsible for handling different entities in the game. 



Question 2
----------

Yes. The author has used meanigful names at almost every place.

Good Names
----------
    a) play.py - Line 11 - play() is a function that performs the task of starting the game.

    b) play.py - Line 29 - resume() is a function which clearly indicates resuming the status of the game.

    c) game.py - Line 81 - is_dark() is a function returning a True/False response. It tells whether the location has a lamp or not and decides whether it is dark.
    
    d) data.py - Line 9 - long_words is a meanigful name. It has a dictionary of long words (user instructions in the game) and their short hands(used by old users of the game).


Bad Names
---------
    a) adventure.py - Line 19 - loop() is a function defined without much context. 

    b) play.py - Line 3 - load_advent_dat() is defined as a function. But, it uses short forms of 'adventure'(advent) and 'data'(dat). It could have been more readable if the naming was complete.

    c) game.py - Line 57 - random() is a function defined to do something random. It is hard to tell about its inner working from the name itself. Is it supposed to return a random number? Or perform a random operation?

    d) game.py - Line 1645 -  wake_repository_dwarves() doesn't clearly indicate it's operation as per its name.


Question 3
----------

Yes. Almost every function does one thing in the program.


Functions that do one thing
---------------------------
    a) game.py - Line 39 - init() function - the initialization is the only thing this function does. In fact, all the init functions of different classes are structured this way.
    
    b) model.py - Line 67 - is_aboveground() is a function that just returns answers one question. In fact, thereare many such functions on lines - 63, 71, 75, 79 which do just one thing.

Functions that don't do one thing
--------------------------------- 
    a) game.py - Line 772 - die() has a function callback() defined in it's own block.

    b) game.py - Line 1115 - t_attack() defines another function callback() within its block of code.


Question 4
----------

Yes. There are functions which cause side effects. 

	a) game.py - Line 114 - The function is defined as start() and is supposed to start the game. But, on lines 120,121,122, there is a for-loop mapping the user commands which are more than 5 letter strings to their short-hand form. 

	#################################################
	def start():
		...
		...

	for key, value in list(self.vocabulary.items()):
            if isinstance(key, str) and len(key) > 5:
                self.vocabulary[key[:5]] = value

    	...
    	...
    #################################################

    b) game.py - Line 772 - def die(). After updating the death status, the function runs other code which is not what the function name defines.  


Question 5
----------

No. I couldn't find any repeated code that could be made into a function.

Question 6
---------- 

Yes. The program uses exception handling. 
	adventure.py - Line 43 - A 'try' exception handling is used
	game,py - Line 1554 - A 'try' exception handling is used

	The input that causes the program to terminate abruptly is 'Ctrl-C', which gives the following message:
		Traceback (most recent call last):
	  	File "adventure.py", line 44, in <module>
	    	loop()
	  	File "adventure.py", line 37, in loop
	    	line = raw_input('> ')
		KeyboardInterrupt

Question 7
----------

No. Every class has only one piece of functionality.

Question 8
----------

Most of the classes are cohesive. 
	a) Class Dwarf (Line 165 - model.py) appears to have less cohesion. 

	Class Dwarf uses an object of Class Room to encapsulate it's location. There is a dependency between the two classes.

	Also, Class Dwarf uses Class Move because the Class Dwarf has methods using an object of 'Move' which is creating a dependency.

Question 9
----------

The author describes the purpose of each module at the very beginning, describes the purpose of classes created in a unique way below the class names using 3 quotes("""......""") and uses '#' for commenting about the fuctioning of the code whereever required.

Good Comments
-------------
	a)  game.py - Line 193 - The reason behind choosing 0.95 or rather the implication of the value 0.95 is explained 
							 very well in the comment.

			# 5% chance per turn of meeting first dwarf
            if self.loc.is_before_hall_of_mists or self.random() < .95:

    b) model.py - Line 1 - The first line itself explains about the contents of the module.

    	"""Classes representing Adventure game components."""


Bad Comments
------------
	a) game.py - Line 177 ->  self.loc = loc = newloc  #74
	   The comment #74 is difficult to comprehend as the context is not clear. It can be 74th line or 74th change or 74th attribute.

	b) game.py - Line 190 -> #6000
	   Again, the comment is difficult to understand without the context.


Question 10
-----------

Module: play.py - The entire code is below. Between functions, a single blank space has been consistently used. So, a single blank space between blocks indicates separation. And, within a function, global variables, the libraries to be imported (preprocessing steps) and working component of the code are separated by a blank line between them (in which ever order they appear).

"""The Adventure game."""

def load_advent_dat(data):
    import os
    from data import parse

    datapath = os.path.join(os.path.dirname(__file__), 'advent.dat')
    with open(datapath, 'r') as datafile:
        parse(data, datafile)

def play(seed=None):
    """Turn the Python prompt into an Adventure game.

    With optional the `seed` argument the caller can supply an integer
    to start the Python random number generator at a known state.

    """
    global _game

    from game import Game
    from prompt import install_words

    _game = Game(seed)
    load_advent_dat(_game)
    install_words(_game)
    _game.start()
    print(_game.output[:-1])

def resume(savefile, quiet=False):
    global _game

    from game import Game
    from prompt import install_words

    _game = Game.resume(savefile)
    install_words(_game)
    if not quiet:
        print('GAME RESTORED\n')

Question 11
-----------

Test module: test_commands.py - PASS

..
----------------------------------------------------------------------
Ran 2 tests in 6.117s

OK

Test module: test_data.py - PASS

..........
----------------------------------------------------------------------
Ran 10 tests in 0.152s

OK

Test module: test_walks.py - PASS

----------------------------------------------------------------------
Ran 2 tests in 2.473s

OK

But, if I run all the 4 tests - FAILURES - 2

----------------------------------------------------------------------
Ran 4 tests in 2.467s

FAILED (failures=2)


Module: test_commands.py
	Fast: Can't say. The test time of this test module is around 6 seconds. This is neither extremely useful nor bad.
	Independent: Yes. The test cases are independent of each other and can be run in any order required.
	Repeatable: Yes. The tests do not have any dependency on the platform they run on.
	Self-validating: Yes. The test just gives a PASS message. 
	Timely: May be. The test_commands might have been written during the time of development.

Module: test_data.py
	Fast: Yes. The test time of this test module is around 0.152 seconds. This is not a bad figure.
	Independent: Yes. The test cases are independent of each other and can be run in any order required.
	Repeatable: Yes. The tests do not have any dependency on the platform they run on.
	Self-validating: Yes. The test just gives a PASS message. 
	Timely: Higly likely. The test_data.py might have been written during the time of development of 'data.py'.

Module: test_walks.py
	Fast: Can't say. The test time of this test module is around 2.4 seconds. This is neither extremely useful nor bad.
	Independent: Yes. The test cases are independent of each other and can be run in any order required.
	Repeatable: Yes. The tests do not have any dependency on the platform they run on because 'os' library is imported.
	Self-validating: Yes. The test just gives a PASS/FAILURE message. 
	Timely: May be. The test_walks.py might have been written during the time of development.
