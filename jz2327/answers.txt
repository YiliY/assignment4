1.	
The first main technique the author used is MODULE: the files in the packge like model.py, data.py, game.py are modules to be imported in the program. 
The second main technique is CLASS: in almost every module files the author defined class to maintain a set of functions, for example, "class data(object)" in data.py(line24). 
The third main technique is FUNCTION to declare different functions, like "def make_object(dictionary, klass, n)" and "def expand_tabs(segments)" in data.py(line40,46).

2. 
The author used many meaningful names in the program. some examples listed below:
a.  in game.py line1567
    def resume(self,obj):
#function resume here means resume the game. 

b.  in game.py line1649
    def compute_score(self, for_score_command=False):
#function compute_score means compute score earned in the game.

Also, the author used some non-meaningful names. For example, in data.py line59-194, the author defined a series of functions named from section1, section2 to section12, whose names have no meanings at all.

3.
examples of functions that only do one thing:
a.  in data.py line54-55
    def accumulate_message(dictionary, n, line):
        dictionary[n] = dictionary.get(n, '') + line + '\n'
#This function adds one message to the dictionary each time.

b.  in game.py line60-61
    def choice(self, seq):
        return self.random_generator.choice(seq)
#This function returns a random number to the attribute.

examples of functions that do more than one thing:
a.  in game.py line130-146
    def start2(self, yes):
        """Display instructions if the user wants them."""
        if yes:
            self.write_message(1)
            self.hints[3].used = True
            self.lamp_turns = 1000

        self.oldloc2 = self.oldloc = self.loc = self.rooms[1]
        self.dwarves = [ Dwarf(self.rooms[n]) for n in (19, 27, 33, 44, 64) ]
        self.pirate = Pirate(self.chest_room)

        treasures = self.treasures
        self.treasures_not_found = len(treasures)
        for treasure in treasures:
            treasure.prop = -1

        self.describe_location()

b.  in data.py line67-72
    def section3(data, x, y, *verbs):
        last_travel = data._last_travel
        if last_travel[0] == x and last_travel[1][0] == verbs[0]:
            verbs = last_travel[1]  
        else:
            data._last_travel = [x, verbs]

4. 
There are a few functions that could cause side effects. One example of these functions is in game.py line567-1580:
    def resume(self, obj):
        """Returns an Adventure game saved to the given file."""
        if isinstance(obj, str):
            savefile = open(obj, 'rb')
        else:
            savefile = obj
        game = pickle.loads(zlib.decompress(savefile.read()))
        if savefile is not obj:
            savefile.close()
        # Reinstate the random number generator.
        game.random_generator = random.Random()
        game.random_generator.setstate(game.random_state)
        del game.random_state
        return game
The function aims to resume the game. However, when a savefile is not found, the function will generate a random number, which will not be seen in the output of the function. It is obviously a side effect.

5. I found on repeated code in game.py line57-61, liested below:
    def random(self):
        return self.random_generator.random()

    def choice(self, seq):
        return self.random_generator.choice(seq)

The two function do similar works as to generate a random number to some certain attributes. In fact, they can be combined as one function maybe named by randomGenerator().

6.
In fact, the author used two kinds of exception handling in two places. One in adventure.py line42-46, using try/except to test the loop() function. Another in game.py line1544-1561, using try/finally in the t_suspend() function. In the test in adventure.py, which indicates then error occurs it will automatically pass and give no output. For example, if we type in some special character like "$%^&"(random listed), the program gives no output.(Discussed with Lizhen Tan) I did not find input to terminate the program abnormally, but some commands like "ctrl+c" or "ctrl+z" still works for terminating a program.

7.
In fact many classes have responsibility over more than one piece of functionality. They are listed below.
a.  in data.py line24
class Data(object)
b.  in game.py line19
class Game(data)
c.  in model.py line38
class Room(object)
d.  in model.py line82
class Word(object)
e.  in model.py line103
class Object(object)
f.  in model.py line152
class Hint(object)
g.  in model.py line165
class Dwarf(object)
h.  in prompt.py line5
class ReprTriggeredPhrase(object)
In fact, one typical example is class Game(Data), which have responsibility for all the functionalities in the game.py. I think seperating the Game class to several subclasses will be better.

8. Not all the classes are cohesive. One typical example is class Game(Data). As described in 7, the game class is too big to being cohesive as there should be a cerntain set of variables that are only used by a subset of methods. For example, the attribute self.clock1 only appears in function _do_command() and start_closing_cave(). As the Game class is not that cohesive, again I suggest to break it to several subclasses.

9. The author uses comments in several ways including: 
a)explanation of intent. One example of good comments is in adventure.py line15:
    sleep(9. / BAUD)  # 8 bits + 1 stop bit @ the given baud rate
which explain how the baud rate 9 comes out.
b)warning of consequences. data.py line6-7 gives an example of good comments:
    # The Adventure data file knows only the first five characters of #each word in the game, so we have to know the full verion of each #word.
It explains that full version of each word is required and gives a remind that only the first characters of each word is recognized by the program.
c)public APIs. One example of good comments in model.py line39:
class Room(object):
    """A location in the game."""
which indicates that room is a location in the game and the class Room has something to do with the room.
Also, there are some bad comments supposed to be avoided. For example, in game.py line115:
    def start(self):
        """Start the game."""
But here we already know that it is a function related to starting the game so it is redundant. Another example is in game.py line153:
    def move_to(self, newloc=None):  #2
It is really confusing what the comment means.

10.
The author did do some good vertical formatting to make code clearer. One example is in adventure.py line19-40: 
def loop():
    parser = argparse.ArgumentParser(
        description='Adventure into the Colossal Caves.',
        prog='{} -m adventure'.format(os.path.basename(executable)))
    parser.add_argument(
        'savefile', nargs='?', help='The filename of game you have saved.')
    args = parser.parse_args()

    if args.savefile is None:
        game = Game()
        load_advent_dat(game)
        game.start()
        baudout(game.output)
    else:
        game = Game.resume(args.savefile)
        baudout('GAME RESTORED\n')

    while not game.is_finished:
        line = raw_input('> ')
        words = re.findall(r'\w+', line)
        if words:
            baudout(game.do_command(words))
In the loop() function, the author first difine some variables, then after a blank line, the author discussed methods to situations with or without savefile, and againg after a blank line, the author declared the methods to where the game is not finished. It is clear that the loop() function has three parts and they are put together respectively.


11.
When I used the command "python -m unittest discover" as instructed to run the tests, it turns out that 13 tests been run in 0.062s, with 13 failed(failures=2, errors=11). So the tests did not pass. Then I tried running the .py files, all shows no output, which indicates that I do not know whether the tests pass or fail, except the test_commands.py raised error as No module named play. First, none of the file contains a main function so none would return an output. Second, The error indicates that the modules should be copied into the tests folder.  
Considering the F.I.R.S.T. criteria:
FAST: the tests can be ran at a fast speed in my laptop so I consider it meet the Fast criteria.
INDENPENDENT: the tests do not depend on each other so they are independent.
REPEATABLE: the tests are obviously repeatable.
SELF-VALIDATING: I cannot figure out whether the tests are passed or not so the tests do NOT meet the self-validating criteria.
TIMELY: in the README.txt the changelog indicates that on Feb. 15, 2011 the tests were established but the newest version were published in Apr. 27, 2012. So the tests may not be timely.
 
