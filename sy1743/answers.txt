Assignment 4
Sida Ye

Q1:
The author uses modules, class and functions to structure the program.
We can see that there are data.py and model.py as modules to serve different purpose in this game.
Also, object move(model.py, line 3) serves as an entry in the travel table.
Finally, there are many functions which are going to perform different purpose in this project. Function carry(model.py line 130) is used to make players be able to carry some stuff.


Q2:
For meaningful names, I find 
is_dead(game.py line 34): decribes whether the player is dead.
treasure_not_found(game.py line 29): treasure has not been found.
deaths(game.py line 35): number of deaths the play has made.

For meaningless names, I find
section1(data.py line 59), section2(data.py line 64), section3(data.py line 67)


Q3:
Do one thing:
resume(play.py line 29): resume the previous record
load_advent_dat(play.py line 3): load the player data
is_at(model.py line 127): determine the location of the player

Do more than one thing:
section3(data.py line 67): serves a lot of purpose.

Q4:
In game.py(line 1577), the game.random_generator was called after savefile.close(), which is unnessary and it caused the side effects.

    def resume(self, obj):
        """Returns an Adventure game saved to the given file."""
        if isinstance(obj, str):
            savefile = open(obj, 'rb')
        else:
            savefile = obj
        game = pickle.loads(zlib.decompress(savefile.read()))
        if savefile is not obj:
            savefile.close()
        # Reinstate the random number generator.
        game.random_generator = random.Random()
        game.random_generator.setstate(game.random_state)
        del game.random_state
        return game



Q5:
Function random(game.py line 57) and choice(game.py line 60) repeated code. I would like to combine them together. (Discussed with Junchao Zheng)


Q6: 
I find exception handling in adventure.py(line 42). It will output an EOFERROR. 
If I typed some capital letter such as "LOL", it will return "I don't know that word" or "I don't understand that".
If I typed special symbols such as "@!!#". it will return nothing.
I used ctrl+c to interrupt this program.


Q7:
I find that in Game.py line 19 class Game is responsible for inventory, the state of the player, treasure, movement of the player and time etc.  
It took so many responsibility. So, it is better that to be split into some other classes.


Q8:
Most of classes are cohesive. But some of them are not. 
I find that in game.py(game.py line 19), it has a lot of different variable and many functions. Part of the variables only used by some methods. So, it is not cohesive.

Q9:
The author made comments in different ways.
1) code explaination
For example, in adventure.py(line 15), "8 bits + 1 stop bit @ the given baud rate" gave an explaination to the code "sleep(9. / BAUD)".
2) purpose explaination
For example, in model.py(line 3), "An entry in the travel table." explained the general purpose of class move.
3) argument explaination
For example, in play.py(line 14), "With optional the `seed` argument the caller can supply an integer to start the Python random number generator at a known state." gave explaination for the arguments in function play.



Q10:
In adventure.py line 19 to 40, the author used vertical formatting to make the code clearer. 'If' statement and 'else' statement are parallel, while inside the 'while not' statement, there is another 'if' statement. This makes the code more readable.

Q11:
It failed when I run 'python -m unittest discover' in terminal.
The terminal returned that "Ran 13 tests in 0.058s. Failed (failures=2, error=1)". So, the test did not pass.

F.T.R.S.T. criteria is fast, independent, repeatable, self-validating and timely.

Fast: the test process only took 0.058s on my computer. So, I assume it is fast.

Independent: each test are not depend on other. Hence it is independent.

Repeatable: I git clone the assignment4 file at my OSX system. I ran the test. It still worked. So, i think this test is repeatable.

Self-validating: The test would return error when it failed. So, I can figure out either it passed or failed. Then, it is self-validating.

Timely: According to the changelog at the bottom of readme file, it indicated that 100% test coverage happend on Feb 15, which is later than the first publish on Jan 31. So, it is not timely.
